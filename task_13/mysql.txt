-- Create the database
CREATE DATABASE ecommerce;
USE ecommerce;

-- Create the customers table
CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    address TEXT
);

-- Create the orders table
CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT NOT NULL,
    order_date DATE NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);

-- Create the products table
CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    description TEXT
);

-- Insert sample data into customers table
INSERT INTO customers (name, email, address) VALUES
('Alice Johnson', 'alice@example.com', '123 Maple Street'),
('Bob Smith', 'bob@example.com', '456 Oak Avenue'),
('Carol Lee', 'carol@example.com', '789 Pine Road');

-- Insert sample data into products table
INSERT INTO products (name, price, description) VALUES
('Product A', 25.00, 'Description for Product A'),
('Product B', 30.00, 'Description for Product B'),
('Product C', 40.00, 'Description for Product C');

-- Insert sample data into orders table
INSERT INTO orders (customer_id, order_date, total_amount) VALUES
(1, '2025-01-01', 55.00),
(2, '2025-01-05', 70.00),
(1, '2025-01-10', 45.00);

-- Retrieve all customers who have placed an order in the last 30 days
SELECT DISTINCT customers.*
FROM customers
JOIN orders ON customers.id = orders.customer_id
WHERE orders.order_date >= CURDATE() - INTERVAL 30 DAY;

-- Get the total amount of all orders placed by each customer
SELECT customers.name, SUM(orders.total_amount) AS total_spent
FROM customers
JOIN orders ON customers.id = orders.customer_id
GROUP BY customers.id;

-- Update the price of Product C to 45.00
UPDATE products
SET price = 45.00
WHERE name = 'Product C';

-- Add a new column discount to the products table
ALTER TABLE products
ADD COLUMN discount DECIMAL(10, 2) DEFAULT 0.00;

-- Retrieve the top 3 products with the highest price
SELECT *
FROM products
ORDER BY price DESC
LIMIT 3;

-- Get the names of customers who have ordered Product A
SELECT DISTINCT customers.name
FROM customers
JOIN orders ON customers.id = orders.customer_id
JOIN order_items ON orders.id = order_items.order_id
JOIN products ON order_items.product_id = products.id
WHERE products.name = 'Product A';

-- Join the orders and customers tables to retrieve the customer's name and order date for each order
SELECT customers.name AS customer_name, orders.order_date
FROM orders
JOIN customers ON orders.customer_id = customers.id;

-- Retrieve the orders with a total amount greater than 150.00
SELECT *
FROM orders
WHERE total_amount > 150.00;

-- Normalize the database by creating a separate table for order items
CREATE TABLE order_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);

-- Example update: Add order items to reference orders and products
-- Remove total_amount column from orders table since it can be derived from order_items
ALTER TABLE orders
DROP COLUMN total_amount;

-- Retrieve the average total of all orders
SELECT AVG(order_items.price * order_items.quantity) AS average_total
FROM order_items
JOIN orders ON order_items.order_id = orders.id;
